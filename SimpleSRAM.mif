-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : B800;  -- 	LOADI   0
           001 : 9810;  -- 	OUT		SRAM_UPPER_ADDR
           002 : B805;  -- 	LOADI   5
           003 : 9811;  -- 	OUT		SRAM_LOWER_ADDR
           004 : B80A;  -- 	LOADI   10
           005 : 9812;  -- 	OUT		SRAM_DATA
           006 : B805;  -- 	LOADI	5
           007 : 9012;  -- 	IN		SRAM_DATA
           008 : B807;  -- 	LOADI 	7
           009 : 9813;  -- 	OUT 	SRAM_INC_DATA
           00A : B808;  -- 	LOADI 	8
           00B : 9813;  -- 	OUT		SRAM_INC_DATA
           00C : 9011;  -- 	IN		SRAM_LOWER_ADDR
           00D : B805;  -- 	LOADI	5
           00E : 9811;  -- 	OUT		SRAM_LOWER_ADDR
           00F : 9012;  -- 	IN		SRAM_DATA
           010 : B806;  -- 	LOADI 	6
           011 : 9811;  -- 	OUT		SRAM_LOWER_ADDR
           012 : 9012;  -- 	IN		SRAM_DATA
           013 : B80A;  -- 	LOADI 	10
           014 : 9814;  -- 	OUT 	SRAM_ADDR_JPOS
           015 : 2815;  -- 	JUMP	Done
           016 : 3019;  -- 	JNEG   M360N
           017 : 6E98;  -- 	ADDI   -360
           018 : 2816;  -- 	JUMP   Mod360
           019 : 6968;  -- 	ADDI   360
           01A : 3019;  -- 	JNEG   M360N
           01B : 8800;  -- 	RETURN
           01C : 381F;  -- 	JPOS   Abs_r
           01D : 591D;  -- 	XOR    NegOne       ; Flip all bits
           01E : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           01F : 8800;  -- 	RETURN
           020 : 0880;  -- 	LOAD   AtanY
           021 : 801C;  -- 	CALL   Abs          ; abs(y)
           022 : 1082;  -- 	STORE  AtanT
           023 : 087F;  -- 	LOAD   AtanX        ; abs(x)
           024 : 801C;  -- 	CALL   Abs
           025 : 2082;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           026 : 3031;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           027 : 087F;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           028 : 302E;  -- 	JNEG   A2_R3
           029 : 8040;  -- 	CALL   A2_calc      ; Octants 1, 8
           02A : 302C;  -- 	JNEG   A2_R1n
           02B : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           02C : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           02D : 8800;  -- 	RETURN
           02E : 8040;  -- 	CALL   A2_calc      ; Octants 4, 5            
           02F : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           030 : 8800;  -- 	RETURN
           031 : 0880;  -- 	LOAD   AtanY        ; Swap input arguments
           032 : 1082;  -- 	STORE  AtanT
           033 : 087F;  -- 	LOAD   AtanX
           034 : 1080;  -- 	STORE  AtanY
           035 : 0882;  -- 	LOAD   AtanT
           036 : 107F;  -- 	STORE  AtanX
           037 : 383C;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           038 : 8040;  -- 	CALL   A2_calc      ; else octants 6, 7
           039 : 801D;  -- 	CALL   Neg          ; Negatge the number
           03A : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           03B : 8800;  -- 	RETURN
           03C : 8040;  -- 	CALL   A2_calc      ; Octants 2, 3
           03D : 801D;  -- 	CALL   Neg          ; negate the angle
           03E : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           03F : 8800;  -- 	RETURN
           040 : 0880;  -- 	LOAD   AtanY
           041 : 10DF;  -- 	STORE  d16sN        ; Y in numerator
           042 : 087F;  -- 	LOAD   AtanX
           043 : 10E0;  -- 	STORE  d16sD        ; X in denominator
           044 : 806C;  -- 	CALL   A2_div       ; divide
           045 : 08E5;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           046 : 1081;  -- 	STORE  AtanRatio
           047 : 10A8;  -- 	STORE  m16sA
           048 : 10A9;  -- 	STORE  m16sB
           049 : 8063;  -- 	CALL   A2_mult      ; X^2
           04A : 10A8;  -- 	STORE  m16sA
           04B : 0883;  -- 	LOAD   A2c
           04C : 10A9;  -- 	STORE  m16sB
           04D : 8063;  -- 	CALL   A2_mult
           04E : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           04F : 10E0;  -- 	STORE  d16sD
           050 : 0881;  -- 	LOAD   AtanRatio
           051 : 10DF;  -- 	STORE  d16sN        ; Ratio in numerator
           052 : 806C;  -- 	CALL   A2_div       ; divide
           053 : 08E5;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           054 : 10A8;  -- 	STORE  m16sA        ; <= result in radians
           055 : 0884;  -- 	LOAD   A2cd         ; degree conversion factor
           056 : 10A9;  -- 	STORE  m16sB
           057 : 8063;  -- 	CALL   A2_mult      ; convert to degrees
           058 : 1082;  -- 	STORE  AtanT
           059 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           05A : 491F;  -- 	AND    One
           05B : 4060;  -- 	JZERO  A2_rdwn      ; round down
           05C : 0882;  -- 	LOAD   AtanT
           05D : 6018;  -- 	SHIFT  -8
           05E : 6801;  -- 	ADDI   1            ; round up
           05F : 8800;  -- 	RETURN
           060 : 0882;  -- 	LOAD   AtanT
           061 : 6018;  -- 	SHIFT  -8           ; round down
           062 : 8800;  -- 	RETURN
           063 : 8085;  -- 	CALL   Mult16s
           064 : 08AD;  -- 	LOAD   mres16sH
           065 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           066 : 10AD;  -- 	STORE  mres16sH
           067 : 08AC;  -- 	LOAD   mres16sL
           068 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           069 : 4931;  -- 	AND    LowByte
           06A : 50AD;  -- 	OR     mres16sH     ; combine high and low words of result
           06B : 8800;  -- 	RETURN
           06C : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           06D : 1082;  -- 	STORE  AtanT
           06E : 0882;  -- 	LOAD   AtanT
           06F : 6FFF;  -- 	ADDI   -1
           070 : 3873;  -- 	JPOS   A2_DN        ; not done; continue shifting
           071 : 80AE;  -- 	CALL   Div16s       ; do the standard division
           072 : 8800;  -- 	RETURN
           073 : 1082;  -- 	STORE  AtanT
           074 : 08DF;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           075 : 6001;  -- 	SHIFT  1
           076 : 58DF;  -- 	XOR    d16sN        ; if the sign changed,
           077 : 307B;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           078 : 58DF;  -- 	XOR    d16sN        ; get back shifted version
           079 : 10DF;  -- 	STORE  d16sN
           07A : 286E;  -- 	JUMP   A2_DL
           07B : 08E0;  -- 	LOAD   d16sD
           07C : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           07D : 10E0;  -- 	STORE  d16sD
           07E : 286E;  -- 	JUMP   A2_DL
           07F : 0000;  -- AtanX:      DW 0
           080 : 0000;  -- AtanY:      DW 0
           081 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           082 : 0000;  -- AtanT:      DW 0        ; temporary value
           083 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           084 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           085 : B800;  -- 	LOADI  0
           086 : 10AA;  -- 	STORE  m16sc        ; clear carry
           087 : 10AD;  -- 	STORE  mres16sH     ; clear result
           088 : B810;  -- 	LOADI  16           ; load 16 to counter
           089 : 10AB;  -- 	STORE  mcnt16s      
           08A : 08AA;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           08B : 408F;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           08C : 08AD;  -- 	LOAD   mres16sH     ; if a carry, 
           08D : 18A8;  -- 	ADD    m16sA        ;  add multiplicand to result H
           08E : 10AD;  -- 	STORE  mres16sH
           08F : 08A9;  -- 	LOAD   m16sB
           090 : 491F;  -- 	AND    One          ; check bit 0 of multiplier
           091 : 10AA;  -- 	STORE  m16sc        ; save as next carry
           092 : 4096;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           093 : 08AD;  -- 	LOAD   mres16sH     ; if bit 0 set,
           094 : 20A8;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           095 : 10AD;  -- 	STORE  mres16sH
           096 : 08A9;  -- 	LOAD   m16sB
           097 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           098 : 48A7;  -- 	AND    c7FFF        ; clear msb
           099 : 10A9;  -- 	STORE  m16sB
           09A : 08AD;  -- 	LOAD   mres16sH     ; load result H
           09B : 600F;  -- 	SHIFT  15           ; move lsb to msb
           09C : 50A9;  -- 	OR     m16sB
           09D : 10A9;  -- 	STORE  m16sB        ; result L now includes carry out from H
           09E : 08AD;  -- 	LOAD   mres16sH
           09F : 6011;  -- 	SHIFT  -1
           0A0 : 10AD;  -- 	STORE  mres16sH     ; shift result H >>1
           0A1 : 08AB;  -- 	LOAD   mcnt16s
           0A2 : 6FFF;  -- 	ADDI   -1           ; check counter
           0A3 : 3889;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           0A4 : 08A9;  -- 	LOAD   m16sB
           0A5 : 10AC;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           0A6 : 8800;  -- 	RETURN              ; Done
           0A7 : 7FFF;  -- c7FFF: DW &H7FFF
           0A8 : 0000;  -- m16sA: DW 0 ; multiplicand
           0A9 : 0000;  -- m16sB: DW 0 ; multipler
           0AA : 0000;  -- m16sc: DW 0 ; carry
           0AB : 0000;  -- mcnt16s: DW 0 ; counter
           0AC : 0000;  -- mres16sL: DW 0 ; result low
           0AD : 0000;  -- mres16sH: DW 0 ; result high
           0AE : B800;  -- 	LOADI  0
           0AF : 10E6;  -- 	STORE  dres16sR     ; clear remainder result
           0B0 : 10E3;  -- 	STORE  d16sC1       ; clear carry
           0B1 : 08DF;  -- 	LOAD   d16sN
           0B2 : 58E0;  -- 	XOR    d16sD
           0B3 : 10E1;  -- 	STORE  d16sS        ; sign determination = N XOR D
           0B4 : B811;  -- 	LOADI  17
           0B5 : 10E2;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           0B6 : 08E0;  -- 	LOAD   d16sD
           0B7 : 801C;  -- 	CALL   Abs          ; take absolute value of denominator
           0B8 : 10E0;  -- 	STORE  d16sD
           0B9 : 08DF;  -- 	LOAD   d16sN
           0BA : 801C;  -- 	CALL   Abs          ; take absolute value of numerator
           0BB : 10DF;  -- 	STORE  d16sN
           0BC : 08DF;  -- 	LOAD   d16sN
           0BD : 601F;  -- 	SHIFT  -15          ; get msb
           0BE : 491F;  -- 	AND    One          ; only msb (because shift is arithmetic)
           0BF : 10E4;  -- 	STORE  d16sC2       ; store as carry
           0C0 : 08DF;  -- 	LOAD   d16sN
           0C1 : 6001;  -- 	SHIFT  1            ; shift <<1
           0C2 : 50E3;  -- 	OR     d16sC1       ; with carry
           0C3 : 10DF;  -- 	STORE  d16sN
           0C4 : 08E2;  -- 	LOAD   d16sT
           0C5 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           0C6 : 40D6;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           0C7 : 10E2;  -- 	STORE  d16sT
           0C8 : 08E6;  -- 	LOAD   dres16sR
           0C9 : 6001;  -- 	SHIFT  1            ; shift remainder
           0CA : 50E4;  -- 	OR     d16sC2       ; with carry from other shift
           0CB : 20E0;  -- 	SUB    d16sD        ; subtract denominator from remainder
           0CC : 30D1;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           0CD : 10E6;  -- 	STORE  dres16sR
           0CE : B801;  -- 	LOADI  1
           0CF : 10E3;  -- 	STORE  d16sC1       ; set carry
           0D0 : 28BC;  -- 	JUMP   Div16s_loop
           0D1 : 18E0;  -- 	ADD    d16sD        ; add denominator back in
           0D2 : 10E6;  -- 	STORE  dres16sR
           0D3 : B800;  -- 	LOADI  0
           0D4 : 10E3;  -- 	STORE  d16sC1       ; clear carry
           0D5 : 28BC;  -- 	JUMP   Div16s_loop
           0D6 : 08DF;  -- 	LOAD   d16sN
           0D7 : 10E5;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           0D8 : 08E1;  -- 	LOAD   d16sS        ; check the sign indicator
           0D9 : 30DB;  -- 	JNEG   Div16s_neg
           0DA : 8800;  -- 	RETURN
           0DB : 08E5;  -- 	LOAD   dres16sQ     ; need to negate the result
           0DC : 801D;  -- 	CALL   Neg
           0DD : 10E5;  -- 	STORE  dres16sQ
           0DE : 8800;  -- 	RETURN	
           0DF : 0000;  -- d16sN: DW 0 ; numerator
           0E0 : 0000;  -- d16sD: DW 0 ; denominator
           0E1 : 0000;  -- d16sS: DW 0 ; sign value
           0E2 : 0000;  -- d16sT: DW 0 ; temp counter
           0E3 : 0000;  -- d16sC1: DW 0 ; carry value
           0E4 : 0000;  -- d16sC2: DW 0 ; carry value
           0E5 : 0000;  -- dres16sQ: DW 0 ; quotient result
           0E6 : 0000;  -- dres16sR: DW 0 ; remainder result
           0E7 : 0911;  -- 	LOAD   L2X
           0E8 : 801C;  -- 	CALL   Abs
           0E9 : 1113;  -- 	STORE  L2T1
           0EA : 0912;  -- 	LOAD   L2Y
           0EB : 801C;  -- 	CALL   Abs
           0EC : 2113;  -- 	SUB    L2T1
           0ED : 3109;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           0EE : 1913;  -- 	ADD    L2T1
           0EF : 10A8;  -- 	STORE  m16sa
           0F0 : B8F6;  -- 	LOADI  246       ; max * 246
           0F1 : 10A9;  -- 	STORE  m16sB
           0F2 : 8085;  -- 	CALL   Mult16s
           0F3 : 08AD;  -- 	LOAD   mres16sH
           0F4 : 6008;  -- 	SHIFT  8
           0F5 : 1114;  -- 	STORE  L2T2
           0F6 : 08AC;  -- 	LOAD   mres16sL
           0F7 : 6018;  -- 	SHIFT  -8        ; / 256
           0F8 : 4931;  -- 	AND    LowByte
           0F9 : 5114;  -- 	OR     L2T2
           0FA : 1115;  -- 	STORE  L2T3
           0FB : 0913;  -- 	LOAD   L2T1
           0FC : 10A8;  -- 	STORE  m16sa
           0FD : B868;  -- 	LOADI  104       ; min * 104
           0FE : 10A9;  -- 	STORE  m16sB
           0FF : 8085;  -- 	CALL   Mult16s
           100 : 08AD;  -- 	LOAD   mres16sH
           101 : 6008;  -- 	SHIFT  8
           102 : 1114;  -- 	STORE  L2T2
           103 : 08AC;  -- 	LOAD   mres16sL
           104 : 6018;  -- 	SHIFT  -8        ; / 256
           105 : 4931;  -- 	AND    LowByte
           106 : 5114;  -- 	OR     L2T2
           107 : 1915;  -- 	ADD    L2T3     ; sum
           108 : 8800;  -- 	RETURN
           109 : 1913;  -- 	ADD    L2T1
           10A : 1114;  -- 	STORE  L2T2
           10B : 0913;  -- 	LOAD   L2T1
           10C : 1115;  -- 	STORE  L2T3
           10D : 0914;  -- 	LOAD   L2T2
           10E : 1113;  -- 	STORE  L2T1
           10F : 0915;  -- 	LOAD   L2T3
           110 : 28EF;  -- 	JUMP   CalcDist
           111 : 0000;  -- L2X:  DW 0
           112 : 0000;  -- L2Y:  DW 0
           113 : 0000;  -- L2T1: DW 0
           114 : 0000;  -- L2T2: DW 0
           115 : 0000;  -- L2T3: DW 0
           116 : 9802;  -- 	OUT    TIMER
           117 : 9002;  -- 	IN     TIMER
           118 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           119 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           11A : 3117;  -- 	JNEG   Wloop
           11B : 8800;  -- 	RETURN
           11C : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           11D : FFFF;  -- NegOne:   DW -1
           11E : 0000;  -- Zero:     DW 0
           11F : 0001;  -- One:      DW 1
           120 : 0002;  -- Two:      DW 2
           121 : 0003;  -- Three:    DW 3
           122 : 0004;  -- Four:     DW 4
           123 : 0005;  -- Five:     DW 5
           124 : 0006;  -- Six:      DW 6
           125 : 0007;  -- Seven:    DW 7
           126 : 0008;  -- Eight:    DW 8
           127 : 0009;  -- Nine:     DW 9
           128 : 000A;  -- Ten:      DW 10
           129 : 0001;  -- Mask0:    DW &B00000001
           12A : 0002;  -- Mask1:    DW &B00000010
           12B : 0004;  -- Mask2:    DW &B00000100
           12C : 0008;  -- Mask3:    DW &B00001000
           12D : 0010;  -- Mask4:    DW &B00010000
           12E : 0020;  -- Mask5:    DW &B00100000
           12F : 0040;  -- Mask6:    DW &B01000000
           130 : 0080;  -- Mask7:    DW &B10000000
           131 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           132 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           133 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           134 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           135 : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           136 : 036F;  -- Ft3:      DW 879
           137 : 0494;  -- Ft4:      DW 1172
           138 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           139 : 00B4;  -- Deg180:   DW 180       ; 180
           13A : 010E;  -- Deg270:   DW 270       ; 270
           13B : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           13C : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           13D : FF9C;  -- RSlow:    DW -100
           13E : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           13F : FEA2;  -- RMid:     DW -350
           140 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           141 : FE0C;  -- RFast:    DW -500
           142 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           143 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           144 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           145 : 0000;  -- 	DW 0
  END;
